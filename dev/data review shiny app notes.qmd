---
title: "BEST Data Review Shiny App Notes"
format:
    html
code-tools: true
---

## Scope

To enhance familiarization with the data, a shiny app was built. This allows calculations to be applied to a time-limited
data set interactively which speeds up visualizations of
computed and measured results.

## Prototyping

The `app.py` file contains the top level structure of the app, pulling static datasets `dta` and `dta_info` from disk into global variables. Each of these is made "reactive" by defining `dtar` and `dta_infor` in the server.

The `data_review1.py` module implements the faceted trend plot display. The input to this is long-form data `dtalr` derived from the column-limited output of `dta_sel_r`, which in turn is a calculation-augmented version of `dta_seltr`.

Within the `data_sel` module, the `Variable` list handles multiple selection using shift and control keys. Within the `data_selt` module the `Start Date` control shows a graphical date selector, but has no effect until a day-of-month is chosen. The `Days` control is also managed by `dta_selt` and is limited to 366 days following the `Start Date`.

The following [data flow diagram](https://en.wikipedia.org/wiki/Data-flow_diagram) uses rectangles for data at rest, ovals for functional transformations and data in reactive form (automatically recomputed data via functions
which is a fundamental feature of shiny), and arrows for data in motion. Text not in shapes indicates the nature of "data in motion" (when next to arrows) or screen outputs (when pointed to by arrows).

```{dot}
digraph app {
    node [shape=box]
    dta
    site_info
    sys_info
    dta_info
    node [shape=none]
    dta_review1_plot [label="Plot selected trends"]
    site_info_table [label="Site info table"]
    sys_info_table [label="System info table"]
    data_any1_plot [label="Plot of data available by day"]
    node [shape=oval]
    dta -> dtar
    dta_info -> dta_infor
    dta_infor
    dtar -> dta_selt_raw_r
    dta_selt_raw_r -> add_solar_geometry [label="time-restricted"]
    site_info -> add_solar_geometry
    add_solar_geometry -> add_array_irradiance
    sys_info -> add_array_irradiance
    add_array_irradiance -> dta_seltr
    dta_seltr -> dta_sel_r [label="time-restricted raw and calc"] 
    dta_infor -> dta_sel_r 
    dta_sel_r -> dtalr [label="column-selected from raw and calc"]
    dtalr -> data_review1 [label="long-form selected data"]
    data_review1 -> dta_review1_plot
    site_info -> site_info_table
    sys_info -> sys_info_table
    dta_sel_r -> data_any1
    data_any1 -> data_any1_plot
}
```


Comments on app elements:

- `dta` is the time-series data under review, pulled from a parquet file created by the prep1.py script.
- `dtar` yields the "reactive" version of `dta` used within the shiny framework.
- `dta_selt_raw_r` yields the reactive time-restricted subset of time-series data. Not shown in the diagram are the start date and number of days entered interactively to control this restriction.
- `add_solar_geometry` is a function that adds solar geometry columns to the dataframe.
- `site_info` contains the site location information pulled from a csv file.
- `add_array_irradiance` is a function that adds various computed estimates of irradiance to the data frame.
- `sys_info` is the system/array configuration information pulled from a csv file.
- `dta_seltr` is the reactive function that recomputes the solar geometry and irradiance columns as needed.
- `dta_info` is the data pulled from a csv file about each column in `dta`.
- `dta_infor` is the "reactive" version of `dta_info`.
- `dta_sel_r` is a reactive module that lets the user interactively specify a subset of the columns in the output of `dta_seltr` based on information drawn from `dta_infor`.
- `dtalr` is the "long" form of `dta_sel_r`, useful for faceted plotting.
- `data_review1` is a module that displays the contents returned by `dtalr` in a faceted trend plot divided according to the units specified in `dta_info`.
- `data_any1` identifies for each day of selected time, and for each selected column, whether any non-missing data exist, and plots this binary information to help the user identify missing data periods.

```{python}

```
